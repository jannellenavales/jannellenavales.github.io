---
title: "Assignment 5"
author: "Jannelle Navales"
date: "2023-10-11"
categories: [r graphics, ggplot2, exporting]
---

Hello! This assignment contains 4 sections:

1.  Literate Programming Views

2.  Elements of Music Visualization

3.  Four Pillars of Visualization

4.  Assignment 5 (Plotting Without Packages, ggplot2, exporting files)

**Discussion of Literate Programming**
Do you think of programming as a piece of literature? Donald Knuth does. In Knuth's proposal of literate programming, he implores programmers to shift away from the mindset of instructing a computer, and instead focusing on communicating with other humans who will interact with and develop the code. In other words, Knuth calls for detailed, readable, and easy to understand documentation. Such documentation can be supplemented by diagrams that display the relationships and reasoning behind instructions. And as developers return to modify and reference their code over time, literate programming establishes an intuitive way to maintain and refer to guidelines as well as make easy changes.

As an HCI student, I highly endorse this idea of literate program as it seems to bridge the relationship between humanity and technology. It is important to not just continously make products easy to use, but also easier to develop. For coding novices, knowing the "why" improves the retention of knowledge for the future and is just as important as the "what." Personally, I know programming is not the most enjoyable task for me, but I appreciate instructions, comments, and good arrangements of integrated code that allow me to think of my task a narrative story (I actually enjoy reading more). This idea extends beyond coding as well. In the field of User Experience, Design Systems are the guidelines used to define the specifics of a user interface. Clear outlining of the necessary components as well as knowing the reasoning behind using them overall contributes to more unified design in the end.

**Elements of Music Visualization**
For this week's assignment, I was able to watch Stephen Malinowski's visualization of Bach, Fugue in A minor. I am a musician (I've played piano for 15 years and sing as well), so this visualization was interesting to watch.

One interesting aspect about this piece is that it is a double fugue, meaning that there are two different subjects, or main musical themes within the song (think of it as a 2-in-1). Malinowski distinguishes between the two fugues by utilizing different shapes - circles connected with lines for the 1st fugue and rectangular bars for the 2nd fugue. This may appear confusing to viewers at first, but upon learning of the double nature of the song, I believe most would draw the conclusion that the nature of the shapes was a clever addition. Malinowski also incorporates other elements to describe aspects of the song. Color represents the different instruments used. Differences in vertical location of circles/bars indicate the pitch of the tune - higher pitches go with higher locations and vice versa. The size of circles and length of rectangles indicate how short or long a note is held for. Animation helps viewers keep track of the current place in the song.

One criticism I have of this particular visualization is that I do not see a clear indication of tone (loudness vs. quietness). Most music has indicators of this for different sections or a whole piece, such as forte, piano, etc. Given that the visualization is already rich in how its variables are represented, it would be interested to see how tone would be incorportated if Malinowski were ever to recreate this.

**The Four Pillars of Visualization**
1. Purpose - why do we need this visualization? Who is going to view it, and what goals do we have in creating this?
2. Content - what are we including in terms of our variables and the relationships between them? What are we NOT including?
3. Structure - How should we display our chosen data/relationships? Think of the types of charts that are most appropriate (bars, lines, etc.).
4. Formatting - Add to the basic structure to make it appealing and easy to understand by viewers, not the other way around.

**Plotting Without Packages**

```{r}

data(Seatbelts)
seatbelt <- data.frame (Year=floor(time(Seatbelts)) ,
Month=factor(cycle(Seatbelts) ,
labels=month.abb) , Seatbelts)
# floor() returns largest integer smaller or equal
# time looks for execution time? establishes time series
# cycle just repeats it?
# month.abb means three letter abbreviation for English months
str(seatbelt)
#factors -> categorical variables - fixed, known set - think month - correlated number
head(seatbelt)

#Create a histogram
# Random data
Y <- rnorm(50)
# Make sure no Y exceed [-3.5, 3.5]
Y[Y < -3.5 | Y > 3.5] <- NA # Selection/set range
x <- seq(-3.5, 3.5, .1)
dn <- dnorm(x)
par(mar=c(4.5, 4.1, 3.1, 0))
hist(Y, breaks=seq(-3.5, 3.5), ylim=c(0, 0.5), 
     col="gray80", freq=FALSE)
lines(x, dnorm(x), lwd=2)
par(mar=c(5.1, 4.1, 4.1, 2.1))

Y <- seatbelt$PetrolPrice
dn <- dnorm(x)
hist(Y) #simple
hist(Y,col="steelblue")
lines(density(seatbelt$PetrolPrice),lwd =2, col = 'black')

#Create a Scatterplot
x <-seatbelt$front
y <-seatbelt$rear
par(las=1, mar=c(4, 4, 5, 4))
plot.new()
plot.window(xlim=c(400,1400), ylim=c(200, 700))
points(x, y, pch=5, cex=0.5)
par(col="black", fg="black", col.axis="black")
axis(1, at=seq(400, 1400, 300))
axis(2, at=seq(200,700,100))
#plotting a box on just 2 axes
box(bty="L")
mtext("Front Related Incidences", side=1, line=3, cex=0.8)
#las 0 means sideways label
mtext("Rear Related Incidences", side=2, line=3, las=0, cex=0.8)
mtext("Comparing Seatbelt Related Incidences", side=3, line=3,cex=1)
par(mar=c(3, 3, 2, 3), col="black", fg="black", col.axis="black")

#HorizontalBarChart
seatbelt$decade <- 10 * (seatbelt$Year %/% 10)
fatalitiesbydecade <- table(seatbelt$decade)
barplot(fatalitiesbydecade, 
        main = "Deaths by Decade",
        xlab = "Decade",
        ylab = "Number of Deaths",
        col = "darkolivegreen4",
        horiz=TRUE)

#VerticalBarChart

deaths_by_year <- tapply(seatbelt$DriversKilled, seatbelt$Year, sum)

barplot(deaths_by_year,
        main = "Total Deaths by Year",
        xlab = "Year",
        ylab = "Total Deaths",
        col = "darkolivegreen4",
        names.arg = unique(seatbelt$Year),
        ylim = c(0, max(deaths_by_year) + 20)) 

#BoxPlot
boxplot(seatbelt$DriversKilled,
        main = "Boxplot of Drivers Killed",
        ylab = "Deaths",
        col = "darkorange3",
        border = "black")

#PieChart - mtcars 
#note to self - take note of which datsets are appropriate for different forms of graphs in the future

data(mtcars)

# Create a pie chart showing the distribution of cylinder counts
data(mtcars)
View(mtcars)
cylinder_counts <- table(mtcars$cyl)
par(mar=c(0, 2, 1, 2), xpd=FALSE, cex=0.5)
pie(cylinder_counts, 
    labels = names(cylinder_counts), 
    main = "How Many Cylinders?", col = gray(seq(0.3,1.0,length=6)))

```

**Plotting With GGPlot**

```{r}
library(tidyverse)
data(Seatbelts)
seatbelt <- data.frame (Year=floor(time(Seatbelts)) ,
Month=factor(cycle(Seatbelts) ,
labels=month.abb) , Seatbelts)
# floor() returns largest integer smaller or equal
# time looks for execution time? establishes time series
# cycle just repeats it?
# month.abb means three letter abbreviation for English months
View(seatbelt)
str(seatbelt)
#factors -> categorical variables - fixed, known set - think month - correlated number
head(seatbelt)

#Create a histogram - original
# Y <- seatbelt$PetrolPrice
# dn <- dnorm(x)
# hist(Y) #simple
# hist(Y,col="steelblue")
# lines(density(seatbelt$PetrolPrice),lwd =2, col = 'black')

Y <- seatbelt$PetrolPrice
ggplot(data = data.frame(Y = Y), aes(x = Y)) +
  geom_histogram(color = 'black', fill = 'steelblue', bins = 30) +
  geom_density(color = 'black', linewidth = 1) +
  labs(title = 'Histogram of Petrol Price',
       x = 'Petrol Price',
       y = 'Frequency') +
  theme_minimal()

#Create a Scatterplot (basics notes)
# x <-seatbelt$front
#y <-seatbelt$rear
#par(las=1, mar=c(4, 4, 5, 4))
#plot.new()
#plot.window(xlim=c(400,1400), ylim=c(200, 700))
#points(x, y, pch=5, cex=0.5)
#par(col="black", fg="black", col.axis="black")
#axis(1, at=seq(400, 1400, 300))
#axis(2, at=seq(200,700,100))
##plotting a box on just 2 axes
#box(bty="L")
#mtext("Front Related Incidences", side=1, line=3, cex=0.8)
#las 0 means sideways label
#mtext("Rear Related Incidences", side=2, line=3, las=0, cex=0.8)
#mtext("Comparing Seatbelt Related Incidences", side=3, line=3,cex=1)
#par(mar=c(3, 3, 2, 3), col="black", fg="black", col.axis="black")

#Scatterplot ggplot2
x <-seatbelt$front
y <-seatbelt$rear
ggplot(data = data.frame(x = x, y = y), aes(x = x, y = y)) +
  geom_point(shape = 24, size = 3, fill = "mediumpurple3") +
  xlim(400, 1400) +
  ylim(200, 700) +
  labs(title = "Comparing Seatbelt Related Incidences",
       x = "Front Related Incidences",
       y = "Rear Related Incidences") +
  theme_minimal() 



#HorizontalBarChart
seatbelt$decade <- 10 * (seatbelt$Year %/% 10)
fatalitiesbydecade <- table(seatbelt$decade)
ggplot(data = data.frame(decade = as.factor(names(fatalitiesbydecade)),
                         deaths = as.numeric(fatalitiesbydecade)), 
       aes(x = decade, y = deaths, fill = decade)) +
  geom_bar(stat = "identity") +
  labs(title = "Deaths by Decade",
       x = "Decade",
       y = "Number of Deaths") +
  theme_minimal() +
  scale_fill_manual(values = c("darkolivegreen4", "darkolivegreen2", "darkolivegreen4")) +
  coord_flip()




#VerticalBarChart

deaths_by_year <- tapply(seatbelt$DriversKilled, seatbelt$Year, sum)
deaths_by_year_df <- data.frame(Year = as.numeric(names(deaths_by_year)),
                                TotalDeaths = as.numeric(deaths_by_year))

ggplot(data = deaths_by_year_df, aes(x = factor(Year), y = TotalDeaths, fill = factor(Year))) +
  geom_bar(stat = "identity") +
  labs(title = "Total Deaths by Year",
       x = "Year",
       y = "Total Deaths") +
  theme_minimal() +
  scale_fill_manual(values = c("darkolivegreen4", "darkolivegreen4", "darkolivegreen4", "darkolivegreen4","darkolivegreen4","darkolivegreen4","darkolivegreen4","darkolivegreen4","darkolivegreen4","darkolivegreen4","darkolivegreen4","darkolivegreen4","darkolivegreen4","darkolivegreen4","darkolivegreen4","darkolivegreen4")) +
  ylim(0, max(deaths_by_year) + 20)





#BoxPlot boxplot(seatbelt$DriversKilled,
# main = "Boxplot of Drivers Killed",
# ylab = "Deaths",
#col = "darkorange3",
# border = "black")

ggplot(data = data.frame(DriversKilled = seatbelt$DriversKilled), 
       aes(y = DriversKilled)) +
  geom_boxplot(color = "black", fill = "darkorange3") +
  labs(title = "Boxplot of Drivers Killed",
       ylab = "Deaths") +
  theme_minimal()

#PieChart - mtcars 
#note to self - take note of which datsets are appropriate for different forms of graphs in the future

data(mtcars)

# Create a pie chart showing the distribution of cylinder counts
data(mtcars)
View(mtcars)
cylinder_counts <- table(mtcars$cyl)

#Data Frame
pie_data <- data.frame(
  cylinder = factor(names(cylinder_counts), levels = names(cylinder_counts)),
  count = as.numeric(cylinder_counts)
)

# Calculate percentages for the labels
pie_data$percent <- pie_data$count / sum(pie_data$count) * 100
pie_data$label <- paste0(pie_data$cylinder, "\n", round(pie_data$percent, 1), "%")

#actual plot
ggplot(data = pie_data, aes(x = "", y = percent, fill = cylinder)) +
  geom_bar(width = 1, stat = "identity") +
  coord_polar("y") +
  theme_void() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14),
    legend.position = "none"
  ) +
  ggtitle("How Many Cylinders?") +
  geom_text(aes(label = label), position = position_stack(vjust = 0.5))

```

**Exporting Charts**

```{r}
data(Seatbelts)
seatbelt <- data.frame (Year=floor(time(Seatbelts)) ,
Month=factor(cycle(Seatbelts) ,
labels=month.abb) , Seatbelts)
x <-seatbelt$front
y <-seatbelt$rear
par(las=1, mar=c(4, 4, 5, 4))
plot.new()
plot.window(xlim=c(400,1400), ylim=c(200, 700))
points(x, y, pch=5, cex=0.5)
par(col="black", fg="black", col.axis="black")
axis(1, at=seq(400, 1400, 300))
axis(2, at=seq(200,700,100))
#plotting a box on just 2 axes
box(bty="L")
mtext("Front Related Incidences", side=1, line=3, cex=0.8)
#las 0 means sideways label
mtext("Rear Related Incidences", side=2, line=3, las=0, cex=0.8)
mtext("Comparing Seatbelt Related Incidences", side=3, line=3,cex=1)
par(mar=c(3, 3, 2, 3), col="black", fg="black", col.axis="black")

#Examples
#pdf(“rplot.pdf”): pdf file
#png(“rplot.png”): png file
#jpeg(“rplot.jpg”): jpeg file
#postscript(“rplot.ps”): postscript file
#bmp(“rplot.bmp”): bmp file
#win.metafile(“rplot.wmf”): windows metafile

#png
png("scatterplot.png")

par(las=1, mar=c(4, 4, 5, 4))
plot.new()
plot.window(xlim=c(400,1400), ylim=c(200, 700))
points(x, y, pch=5, cex=0.5)
par(col="black", fg="black", col.axis="black")
axis(1, at=seq(400, 1400, 300))
axis(2, at=seq(200,700,100))
#plotting a box on just 2 axes
box(bty="L")
mtext("Front Related Incidences", side=1, line=3, cex=0.8)
#las 0 means sideways label
mtext("Rear Related Incidences", side=2, line=3, las=0, cex=0.8)
mtext("Comparing Seatbelt Related Incidences", side=3, line=3,cex=1)
par(mar=c(3, 3, 2, 3), col="black", fg="black", col.axis="black")

dev.off()

#jpg
png("scatterplot.jpg")

par(las=1, mar=c(4, 4, 5, 4))
plot.new()
plot.window(xlim=c(400,1400), ylim=c(200, 700))
points(x, y, pch=5, cex=0.5)
par(col="black", fg="black", col.axis="black")
axis(1, at=seq(400, 1400, 300))
axis(2, at=seq(200,700,100))
#plotting a box on just 2 axes
box(bty="L")
mtext("Front Related Incidences", side=1, line=3, cex=0.8)
#las 0 means sideways label
mtext("Rear Related Incidences", side=2, line=3, las=0, cex=0.8)
mtext("Comparing Seatbelt Related Incidences", side=3, line=3,cex=1)
par(mar=c(3, 3, 2, 3), col="black", fg="black", col.axis="black")

dev.off()

#svg
png("scatterplot.svg")

par(las=1, mar=c(4, 4, 5, 4))
plot.new()
plot.window(xlim=c(400,1400), ylim=c(200, 700))
points(x, y, pch=5, cex=0.5)
par(col="black", fg="black", col.axis="black")
axis(1, at=seq(400, 1400, 300))
axis(2, at=seq(200,700,100))
#plotting a box on just 2 axes
box(bty="L")
mtext("Front Related Incidences", side=1, line=3, cex=0.8)
#las 0 means sideways label
mtext("Rear Related Incidences", side=2, line=3, las=0, cex=0.8)
mtext("Comparing Seatbelt Related Incidences", side=3, line=3,cex=1)
par(mar=c(3, 3, 2, 3), col="black", fg="black", col.axis="black")

dev.off()

#tiff
png("scatterplot.tiff")

par(las=1, mar=c(4, 4, 5, 4))
plot.new()
plot.window(xlim=c(400,1400), ylim=c(200, 700))
points(x, y, pch=5, cex=0.5)
par(col="black", fg="black", col.axis="black")
axis(1, at=seq(400, 1400, 300))
axis(2, at=seq(200,700,100))
#plotting a box on just 2 axes
box(bty="L")
mtext("Front Related Incidences", side=1, line=3, cex=0.8)
#las 0 means sideways label
mtext("Rear Related Incidences", side=2, line=3, las=0, cex=0.8)
mtext("Comparing Seatbelt Related Incidences", side=3, line=3,cex=1)
par(mar=c(3, 3, 2, 3), col="black", fg="black", col.axis="black")

dev.off()

#bmg
png("scatterplot.bmg")

par(las=1, mar=c(4, 4, 5, 4))
plot.new()
plot.window(xlim=c(400,1400), ylim=c(200, 700))
points(x, y, pch=5, cex=0.5)
par(col="black", fg="black", col.axis="black")
axis(1, at=seq(400, 1400, 300))
axis(2, at=seq(200,700,100))
#plotting a box on just 2 axes
box(bty="L")
mtext("Front Related Incidences", side=1, line=3, cex=0.8)
#las 0 means sideways label
mtext("Rear Related Incidences", side=2, line=3, las=0, cex=0.8)
mtext("Comparing Seatbelt Related Incidences", side=3, line=3,cex=1)
par(mar=c(3, 3, 2, 3), col="black", fg="black", col.axis="black")

dev.off()

#notes - PNG has the highest quality, whereas jpg and tiff have lower qualities. We cannot access the svg and bmg as presented with full graphics.


```
